module initialise (
    input clk,  // clock
    input rst,  // reset
    input io_dip[11],   //0-8 is button, 9 and 10 is start, reset
    output io_sel[3],
    output io_seg[8],
    output led_lights[12], //0-8 is gamestate, 9-11 is level
    //output state[3],
    input usb_rx,
    output usb_tx
    //output alufn[6],
    //output asel,
    //output bsel[4],
    //output we,
    //output ra[4],
    //output rb[4],
    //output rc[4],
    //output wdsel[2]
  
  ) {

  .clk(clk){
    button_conditioner buttoncond[11];
    edge_detector buttondetector[11](#RISE(1), #FALL(0));
    edge_detector seven_seg_detector(#RISE(1), #FALL(0));
    
    .rst(rst){
      // buttonInput buttonIn;
//      regfile reg;
      calculation calculationunit;
      fsm gameMode = {IDLE, IDLE1, CHECKBOARD, CHECKCLEAR, INIT2 , INIT3, WIN, RESET, FRENZY, FAIL};
      multi_dec_ctr dec_ctr(#DIGITS(3));
      multi_seven_seg seg(#DIGITS(3));
      counter ctr (#SIZE(1), #DIV(26));
    }
  }
  sig checkinp, reset;
  
  

  always {
    //state = gameMode.q;
    // led_lights = 12h000;
    io_seg = ~8h00;
    io_sel = ~3h0;
    usb_tx = usb_rx;       // echo the serial data
    calculationunit.alufn = 6b0;
    calculationunit.asel = 1b0;
    calculationunit.bsel = 4h0;
    calculationunit.we = 0;
    calculationunit.ra = 4b1111;
    calculationunit.rb = 4b1111;
    calculationunit.rc = 4b1111;
    calculationunit.wdsel = 2b0;
    led_lights = calculationunit.led_lights;
    // led_lights[11:9] = reg.r1[2:0];     // the CLEAR level lights, corresponds to bit 0-2 of register 1
    // led_lights[8:0] = reg.r0 [8:0];     // the game state which is referenced from register 0
    
    
    // seven_seg decimal_counter
    seven_seg_detector.in = ctr.value;
    dec_ctr.inc = 0;
    dec_ctr.set = 4b0;
    dec_ctr.new_val = {4h0,4h0,4h0};
    seg.values = {4h0,4h0,4h0};

    buttoncond.in = io_dip[10:0];
    buttondetector.in = buttoncond.out;
    
    //buttonInput
    // buttonIn.button = buttondetector.out[8:0];
    
    //gameMode
    case(gameMode.q){
    
      default:
        calculationunit.we = 1b0;
        
      gameMode.IDLE:
      //display some stuff here
      if(buttondetector.out[9]){         // if start == 1
        calculationunit.alufn = 6b011010;    // ALUFN for "A"
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4hA;
        calculationunit.we = 1b1;
        calculationunit.ra = 4h2;
        calculationunit.rc = 4h0;
        calculationunit.wdsel = 2b0;
        gameMode.d = gameMode.IDLE1;
        dec_ctr.set = 4hF;
        dec_ctr.new_val = {4h1,4h0,4h0};          
        }
      else{
        gameMode.d = gameMode.IDLE;
      }
        
      gameMode.IDLE1:
        checkinp = 0;
        reset = 0;
        dec_ctr.inc = seven_seg_detector.out;
        seg.values = dec_ctr.digits;
        io_seg = seg.seg;
        io_sel = ~seg.sel;
        if(buttondetector.out[0]){
          calculationunit.bsel = 4h1;
          checkinp = 1;          
          }
        if(buttondetector.out[1]){
          calculationunit.bsel = 4h2;
          checkinp = 1;          
          }
        if(buttondetector.out[2]){
          calculationunit.bsel = 4h3;
          checkinp = 1;          
          }
        if(buttondetector.out[3]){
          calculationunit.bsel = 4h4;
          checkinp = 1;          
          }
        if(buttondetector.out[4]){
          calculationunit.bsel = 4h5;
          checkinp = 1;          
          }
        if(buttondetector.out[5]){
          calculationunit.bsel = 4h6;
          checkinp = 1;          
          }
        if(buttondetector.out[6]){
          calculationunit.bsel = 4h7;
          checkinp = 1;          
          }
        if(buttondetector.out[7]){
          calculationunit.bsel = 4h8;
          checkinp = 1;          
          }
        if(buttondetector.out[8]){
          calculationunit.bsel = 4h9;
          checkinp = 1;          
          }
        if(buttondetector.out[10]) {      // check if reset == 1 
          calculationunit.we = 1b1;
          calculationunit.rc = 4h0;
          calculationunit.wdsel = 2b01;
          checkinp = 0;
          reset = 1;
        }
        if(dec_ctr.ovf){
          gameMode.d = gameMode.FAIL;
        }
        else if(checkinp){
          calculationunit.alufn = 6b010110;    // ALUFN for "XOR"
          calculationunit.asel = 1b0;
          // calculationunit.bsel = buttonIn.bsel;  //not sure whether need dff to store bsel, but if need idk whether can implement(cause by right we only can use regfile), if not we can just hard code
          calculationunit.we = 1b1;
          calculationunit.ra = 4h0;
          calculationunit.rc = 4h0;
          calculationunit.wdsel = 2b0;
          gameMode.d = gameMode.CHECKBOARD;
        }
        else if(reset){
          gameMode.d = gameMode.RESET;
          }
        else {
          gameMode.d = gameMode.IDLE1;
        }
      // alternate way
      /*gameMode.B1:
        calculationunit.alufn = 6b010110;    // ALUFN for "XOR"
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4h1;
        calculationunit.we = 1b1;
        calculationunit.ra = 4h0;
        calculationunit.rc = 4h0;
        calculationunit.wdsel = 2b0;
        gameMode.d = gameMode.IDLE1;*/
        
      gameMode.CHECKBOARD:
        dec_ctr.inc = seven_seg_detector.out;
        seg.values = dec_ctr.digits;
        io_seg = seg.seg;
        io_sel = ~seg.sel;
        if(dec_ctr.ovf){
          gameMode.d = gameMode.FAIL;
        }
        else{
          calculationunit.alufn = 6b110010;       //ALUFN for compare equal
          calculationunit.asel = 1b0;
          calculationunit.bsel = 4h0;
          calculationunit.we = 1b1;
          calculationunit.ra = 4h0;
          calculationunit.rb = 4hF;
          calculationunit.rc = 4b0101;
          calculationunit.wdsel = 2b0;
  //        if (calculation.doneCalculation){
          gameMode.d = gameMode.CHECKCLEAR;
  //        }
//        else{
//        gameMode.d = gameMode.CHECKBOARD;
//       }
        }
        
      gameMode.CHECKCLEAR:
        dec_ctr.inc = seven_seg_detector.out;
        seg.values = dec_ctr.digits;
        io_seg = seg.seg;
        io_sel = ~seg.sel;
        if(dec_ctr.ovf){
          gameMode.d = gameMode.FAIL;
        }
        else{
          calculationunit.alufn = 6b000000;   //ALUFN for ADD
          calculationunit.asel = 1b0;
          calculationunit.bsel = 4h0;
          calculationunit.we = 1b1;
          calculationunit.ra = 4h1;
          calculationunit.rb = 4b0101;
          calculationunit.rc = 4h1; 
          calculationunit.wdsel = 2b0;
          
  //        if (calculation.doneCalculation){    // I think need a variable here to check whether got do calculation
            if(calculationunit.bdata[0] == b1){
              if (calculationunit.adata >= 16b11){
                  gameMode.d = gameMode.FRENZY;
              }
              else if(calculationunit.adata[1:0] == b00){
                  gameMode.d = gameMode.INIT2;
                }
              else if(calculationunit.adata[1:0] == b01){
                  gameMode.d = gameMode.INIT3;
                }
              else if (calculationunit.adata[1:0] == b10){
                  gameMode.d = gameMode.WIN;
                }
          }
            else if (calculationunit.bdata[0] == b0){
            gameMode.d = gameMode.IDLE1;
            }
  //        }
  //        else{
  //        gameMode.d = gameMode.CHECKCLEAR;
  //        }
        }
      gameMode.INIT2:
        dec_ctr.inc = seven_seg_detector.out;
        seg.values = dec_ctr.digits;
        io_seg = seg.seg;
        io_sel = ~seg.sel;
        if(dec_ctr.ovf){
          gameMode.d = gameMode.FAIL;
        }
        else{
          calculationunit.alufn = 6b011010;    // ALUFN for "A"
          calculationunit.asel = 1b0;
          calculationunit.bsel = 4hA;
          calculationunit.we = 1b1;
          calculationunit.ra = 4h3;
          calculationunit.rc = 4h0;
          calculationunit.wdsel = 2b0;
          gameMode.d = gameMode.IDLE1;
        }
      gameMode.INIT3:
        dec_ctr.inc = seven_seg_detector.out;
        seg.values = dec_ctr.digits;
        io_seg = seg.seg;
        io_sel = ~seg.sel;
        if(dec_ctr.ovf){
          gameMode.d = gameMode.FAIL;
        }
        else{
          calculationunit.alufn = 6b011010;    // ALUFN for "A"
          calculationunit.asel = 1b0;
          calculationunit.bsel = 4hA;
          calculationunit.we = 1b1;
          calculationunit.ra = 4h4;
          calculationunit.rc = 4h0;
          calculationunit.wdsel = 2b0;
          gameMode.d = gameMode.IDLE1;
        }
        
      gameMode.FRENZY:
        dec_ctr.set = 4hF;
        dec_ctr.new_val = {4h0,4h3,4h0};
        calculationunit.alufn = 6b011010;    // ALUFN for "A"
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4hA;
        calculationunit.we = 1b1;
        calculationunit.ra = 4h6;
        calculationunit.rc = 4h0;
        calculationunit.wdsel = 2b0;
        gameMode.d = gameMode.IDLE1;
        
      gameMode.WIN:
        dec_ctr.inc = 1b0;
        seg.values = dec_ctr.digits;
        io_seg = seg.seg;
        io_sel = ~seg.sel;
        calculationunit.alufn = 6b010011;    // ALUFN for "NOT A"
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4hA;
        calculationunit.we = 1b1;
        calculationunit.ra = 4hF;
        calculationunit.rc = 4h0;
        calculationunit.wdsel = 2b0;
        
        if(buttondetector.out[10]) {      // check if reset == 1 
          calculationunit.we = 1b1;
          calculationunit.rc = 4h0;
          calculationunit.wdsel = 2b01;
          gameMode.d = gameMode.RESET;
        }
        if(buttondetector.out[9]){
          gameMode.d = gameMode.FRENZY;
          }
      gameMode.RESET:
        calculationunit.we = 1b1;
        calculationunit.rc = 4h1;
        calculationunit.wdsel = 2b01;
        gameMode.d = gameMode.IDLE;
        
      gameMode.FAIL:
      
        calculationunit.alufn = 6b011010;    // ALUFN for "A"
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4hA;
        calculationunit.we = 1b0;
        calculationunit.ra = 4h1;
        calculationunit.wdsel = 2b0;
        
        if(calculationunit.adata < 3){
          dec_ctr.set = 4hf;
          dec_ctr.new_val = {4hf, 4hf, 4hf};
          }
        else if(calculationunit.adata == 3){
          dec_ctr.set = 4hf;
          dec_ctr.new_val = {4hE, 4hE, 4hE}; 
          }
        else if(calculationunit.adata == 4){
          dec_ctr.set = 4hf;
          dec_ctr.new_val = {4hD, 4hD, 4hD}; 
          }
        else if(calculationunit.adata == 5){
          dec_ctr.set = 4hf;
          dec_ctr.new_val = {4hC, 4hC, 4hC}; 
          }
        else if(calculationunit.adata == 6){
          dec_ctr.set = 4hf;
          dec_ctr.new_val = {4hB, 4hB, 4hB}; 
          }
        else if(calculationunit.adata == 7){
          dec_ctr.set = 4hf;
          dec_ctr.new_val = {4hA, 4hA, 4hA}; 
          }
        else{
          dec_ctr.set = 4hf;
          dec_ctr.new_val = {4h5, 4h5, 4h5}; 
          }
        seg.values = dec_ctr.digits;
        io_seg = seg.seg;
        io_sel = ~seg.sel;
        if(buttondetector.out[10]) {      // check if reset == 1 
          calculationunit.we = 1b1;
          calculationunit.rc = 4h0;
          calculationunit.wdsel = 2b01;
          gameMode.d = gameMode.RESET;
        }             
  }
}
