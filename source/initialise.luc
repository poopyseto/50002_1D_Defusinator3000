module initialise (
    input clk,  // clock
    input rst,  // reset
    input io_dip[11],   //0-8 is button, 9 and 10 is start, reset
    output io_sel[3],
    output io_seg[8],
    output led_lights[12], //0-8 is gamestate, 9-11 is level
    input usb_rx,
    output usb_tx
    //output alufn[6],
    //output asel,
    //output bsel[4],
    //output we,
    //output ra[4],
    //output rb[4],
    //output rc[4],
    //output wdsel[2]
  
  ) {

  .clk(clk){
    button_conditioner buttoncond[11];
    edge_detector buttondetector[11](#RISE(1), #FALL(0));
    
    .rst(rst){
      buttonInput buttonIn;
//      regfile reg;
      calculation calculationunit;
      fsm gameMode = {IDLE, IDLE1, CHECKBOARD, CHECKCLEAR, INIT2 , INIT3, WIN};
    }
  }
  
  

  always {
    
    led_lights = 12h000;
    io_seg = ~8h00;
    io_sel = ~3h0;
    usb_tx = usb_rx;       // echo the serial data
    calculationunit.alufn = 6b0;
    calculationunit.asel = 1b0;
    calculationunit.bsel = 4h0;
    calculationunit.we = 0;
    calculationunit.ra = 4b1111;
    calculationunit.rb = 4b1111;
    calculationunit.rc = 4b1111;
    calculationunit.wdsel = 2b0;
    led_lights = calculationunit.led_lights;
    // led_lights[11:9] = reg.r1[2:0];     // the CLEAR level lights, corresponds to bit 0-2 of register 1
    // led_lights[8:0] = reg.r0 [8:0];     // the game state which is referenced from register 0
    
    
    buttoncond.in = io_dip[10];
    buttondetector.in = buttoncond.out;
    
    //buttonInput
    buttonIn.button = buttondetector.out[8:0];
    
    //gameMode
    case(gameMode.q){
    
      gameMode.IDLE:
      //display some stuff here
      if(io_dip[9]){         // if start == 1
        calculationunit.alufn = 6b011010;    // ALUFN for "A"
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4hA;
        calculationunit.we = 1b1;
        calculationunit.ra = 4h2;
        calculationunit.rc = 4h0;
        calculationunit.wdsel = 2b0;
        gameMode.d = gameMode.IDLE1;          
        }
      else{
        gameMode.d = gameMode.IDLE;
      }
        
      gameMode.IDLE1:
        if(buttonIn.checkForInput){
          calculationunit.alufn = 6b010110;    // ALUFN for "XOR"
          calculationunit.asel = 1b0;
          calculationunit.bsel = buttonIn.bsel;  //not sure whether need dff to store bsel, but if need idk whether can implement(cause by right we only can use regfile), if not we can just hard code
          calculationunit.we = 1b1;
          calculationunit.ra = 4h0;
          calculationunit.rc = 4h0;
          calculationunit.wdsel = 2b0;
          gameMode.d = gameMode.CHECKBOARD;
        }
        else if(io_dip[10]) {      // check if reset == 1 
          calculationunit.we = 1b1;
          calculationunit.rc = 4h0;
          calculationunit.wdsel = 2b01;
          gameMode.d = gameMode.IDLE;
    
        }
        else{
          gameMode.d = gameMode.IDLE1;
        }
      gameMode.CHECKBOARD:
        calculationunit.alufn = 6b110010;       //ALUFN for compare equal
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4h0;
        calculationunit.we = 1b1;
        calculationunit.ra = 4h0;
        calculationunit.rb = 4hF;
        calculationunit.rc = 4b0101;
        calculationunit.wdsel = 2b0;
//        if (calculation.doneCalculation){
        gameMode.d = gameMode.CHECKCLEAR;
//        }
//        else{
//        gameMode.d = gameMode.CHECKBOARD;
//       }
        
      gameMode.CHECKCLEAR:
        calculationunit.alufn = 6b000000;   //ALUFN for ADD
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4h0;
        calculationunit.we = 1b1;
        calculationunit.ra = 4h1;
        calculationunit.rb = 4b0101;
        calculationunit.rc = 4h1; 
        calculationunit.wdsel = 2b0;
        
//        if (calculation.doneCalculation){    // I think need a variable here to check whether got do calculation
          if(calculationunit.bdata[0] == b1){
            if(calculationunit.adata[1:0] == b00){
                gameMode.d = gameMode.INIT2;
              }
            else if(calculationunit.adata[1:0] == b01){
                gameMode.d = gameMode.INIT3;
              }
            else if (calculationunit.adata[1:0] == b10){
                gameMode.d = gameMode.WIN;
              }
        }
          else if (calculationunit.bdata[0] == b0){
          gameMode.d = gameMode.IDLE1;
          }
//        }
//        else{
//        gameMode.d = gameMode.CHECKCLEAR;
//        }
      gameMode.INIT2:
        calculationunit.alufn = 6b011010;    // ALUFN for "A"
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4hA;
        calculationunit.we = 1b1;
        calculationunit.ra = 4h3;
        calculationunit.rc = 4h0;
        calculationunit.wdsel = 2b0;
        gameMode.d = gameMode.IDLE1;
        
      gameMode.INIT3:
        calculationunit.alufn = 6b011010;    // ALUFN for "A"
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4hA;
        calculationunit.we = 1b1;
        calculationunit.ra = 4h4;
        calculationunit.rc = 4h0;
        calculationunit.wdsel = 2b0;
        gameMode.d = gameMode.IDLE1;    
          
      gameMode.WIN:
        calculationunit.alufn = 6b000101;    // ALUFN for "NOT A"
        calculationunit.asel = 1b0;
        calculationunit.bsel = 4hA;
        calculationunit.we = 1b1;
        calculationunit.ra = 4hF;
        calculationunit.rc = 4h0;
        calculationunit.wdsel = 2b0;
        
        if(io_dip[10]) {      // check if reset == 1 
          calculationunit.we = 1b1;
          calculationunit.rc = 4h0;
          calculationunit.wdsel = 2b01;
          gameMode.d = gameMode.IDLE;
        }       
  }
}
