module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input io_dip[11],       // user input for game buttons [8:0], start [9] and end [10]
    output led_light[12],   // 8 user controllable LEDs
    output io_seg[8],
    output io_sel[3],
    input usb_rx,           // USB->Serial input
    output usb_tx           // USB->Serial output
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    // edge_detector seven_seg_detector(#RISE(1), #FALL(0));
    .rst(rst){
//      initialise init;
      /*multi_dec_ctr dec_ctr;
      multi_seven_seg seg;
      counter ctr (#SIZE(1), #DIV(26));*/ 
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;
    led_light = 12hFFF;
    io_seg = 8b0;
    io_sel = 3b0;
    // seven_seg decimal_counter
    /*seven_seg_detector.in = ctr.value;
    dec_ctr.inc = seven_seg_detector.out;
    seg.values = dec_ctr.digits;*/
    //init.usb_rx = usb_rx;
    //usb_tx = init.usb_tx;
    
    //io_seg = seg.seg;
    //io_sel = ~seg.sel;
    //init.io_dip = io_dip;
    
    //led_light = init.led_lights;
    //io_seg = init.io_seg;
    //io_sel = init.io_sel;
   
    
    
  }
}