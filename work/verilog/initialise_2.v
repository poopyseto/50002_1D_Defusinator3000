/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module initialise_2 (
    input clk,
    input rst,
    input [10:0] io_dip,
    output reg [2:0] io_sel,
    output reg [7:0] io_seg,
    output reg [11:0] led_lights,
    input usb_rx,
    output reg usb_tx
  );
  
  
  
  wire [(4'hb+0)-1:0] M_buttoncond_out;
  reg [(4'hb+0)-1:0] M_buttoncond_in;
  
  genvar GEN_buttoncond0;
  generate
  for (GEN_buttoncond0=0;GEN_buttoncond0<4'hb;GEN_buttoncond0=GEN_buttoncond0+1) begin: buttoncond_gen_0
    button_conditioner_3 buttoncond (
      .clk(clk),
      .in(M_buttoncond_in[GEN_buttoncond0*(1)+(1)-1-:(1)]),
      .out(M_buttoncond_out[GEN_buttoncond0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [(4'hb+0)-1:0] M_buttondetector_out;
  reg [(4'hb+0)-1:0] M_buttondetector_in;
  
  genvar GEN_buttondetector0;
  generate
  for (GEN_buttondetector0=0;GEN_buttondetector0<4'hb;GEN_buttondetector0=GEN_buttondetector0+1) begin: buttondetector_gen_0
    edge_detector_4 buttondetector (
      .clk(clk),
      .in(M_buttondetector_in[GEN_buttondetector0*(1)+(1)-1-:(1)]),
      .out(M_buttondetector_out[GEN_buttondetector0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [1-1:0] M_seven_seg_detector_out;
  reg [1-1:0] M_seven_seg_detector_in;
  edge_detector_4 seven_seg_detector (
    .clk(clk),
    .in(M_seven_seg_detector_in),
    .out(M_seven_seg_detector_out)
  );
  wire [1-1:0] M_buttonIn_bsel;
  wire [1-1:0] M_buttonIn_checkForInput;
  reg [9-1:0] M_buttonIn_button;
  buttonInput_5 buttonIn (
    .clk(clk),
    .rst(rst),
    .button(M_buttonIn_button),
    .bsel(M_buttonIn_bsel),
    .checkForInput(M_buttonIn_checkForInput)
  );
  wire [16-1:0] M_calculationunit_adata;
  wire [16-1:0] M_calculationunit_bdata;
  wire [12-1:0] M_calculationunit_led_lights;
  reg [6-1:0] M_calculationunit_alufn;
  reg [1-1:0] M_calculationunit_asel;
  reg [4-1:0] M_calculationunit_bsel;
  reg [1-1:0] M_calculationunit_we;
  reg [4-1:0] M_calculationunit_ra;
  reg [4-1:0] M_calculationunit_rb;
  reg [4-1:0] M_calculationunit_rc;
  reg [2-1:0] M_calculationunit_wdsel;
  calculation_6 calculationunit (
    .clk(clk),
    .rst(rst),
    .alufn(M_calculationunit_alufn),
    .asel(M_calculationunit_asel),
    .bsel(M_calculationunit_bsel),
    .we(M_calculationunit_we),
    .ra(M_calculationunit_ra),
    .rb(M_calculationunit_rb),
    .rc(M_calculationunit_rc),
    .wdsel(M_calculationunit_wdsel),
    .adata(M_calculationunit_adata),
    .bdata(M_calculationunit_bdata),
    .led_lights(M_calculationunit_led_lights)
  );
  localparam IDLE_gameMode = 3'd0;
  localparam IDLE1_gameMode = 3'd1;
  localparam CHECKBOARD_gameMode = 3'd2;
  localparam CHECKCLEAR_gameMode = 3'd3;
  localparam INIT2_gameMode = 3'd4;
  localparam INIT3_gameMode = 3'd5;
  localparam WIN_gameMode = 3'd6;
  localparam RESET_gameMode = 3'd7;
  
  reg [2:0] M_gameMode_d, M_gameMode_q = IDLE_gameMode;
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_7 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_8 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [1-1:0] M_ctr_value;
  counter_9 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  
  always @* begin
    M_gameMode_d = M_gameMode_q;
    
    led_lights = 12'h000;
    io_seg = 8'hff;
    io_sel = 3'h7;
    usb_tx = usb_rx;
    M_calculationunit_alufn = 6'h00;
    M_calculationunit_asel = 1'h0;
    M_calculationunit_bsel = 4'h0;
    M_calculationunit_we = 1'h0;
    M_calculationunit_ra = 4'hf;
    M_calculationunit_rb = 4'hf;
    M_calculationunit_rc = 4'hf;
    M_calculationunit_wdsel = 2'h0;
    led_lights = M_calculationunit_led_lights;
    M_seven_seg_detector_in = M_ctr_value;
    M_dec_ctr_inc = M_seven_seg_detector_out;
    M_seg_values = M_dec_ctr_digits;
    io_seg = M_seg_seg;
    io_sel = ~M_seg_sel;
    M_buttoncond_in = io_dip[10+0-:1];
    M_buttondetector_in = M_buttoncond_out;
    M_buttonIn_button = M_buttondetector_out[0+8-:9];
    
    case (M_gameMode_q)
      IDLE_gameMode: begin
        if (io_dip[9+0-:1]) begin
          M_calculationunit_alufn = 6'h1a;
          M_calculationunit_asel = 1'h0;
          M_calculationunit_bsel = 4'ha;
          M_calculationunit_we = 1'h1;
          M_calculationunit_ra = 4'h2;
          M_calculationunit_rc = 4'h0;
          M_calculationunit_wdsel = 2'h0;
          M_gameMode_d = IDLE1_gameMode;
        end else begin
          M_gameMode_d = IDLE_gameMode;
        end
      end
      IDLE1_gameMode: begin
        if (M_buttonIn_checkForInput) begin
          M_calculationunit_alufn = 6'h16;
          M_calculationunit_asel = 1'h0;
          M_calculationunit_bsel = M_buttonIn_bsel;
          M_calculationunit_we = 1'h1;
          M_calculationunit_ra = 4'h0;
          M_calculationunit_rc = 4'h0;
          M_calculationunit_wdsel = 2'h0;
          M_gameMode_d = CHECKBOARD_gameMode;
        end else begin
          if (io_dip[10+0-:1]) begin
            M_calculationunit_we = 1'h1;
            M_calculationunit_rc = 4'h0;
            M_calculationunit_wdsel = 2'h1;
            M_gameMode_d = RESET_gameMode;
          end else begin
            M_gameMode_d = IDLE1_gameMode;
          end
        end
      end
      CHECKBOARD_gameMode: begin
        M_calculationunit_alufn = 6'h32;
        M_calculationunit_asel = 1'h0;
        M_calculationunit_bsel = 4'h0;
        M_calculationunit_we = 1'h1;
        M_calculationunit_ra = 4'h0;
        M_calculationunit_rb = 4'hf;
        M_calculationunit_rc = 4'h5;
        M_calculationunit_wdsel = 2'h0;
        M_gameMode_d = CHECKCLEAR_gameMode;
      end
      CHECKCLEAR_gameMode: begin
        M_calculationunit_alufn = 6'h00;
        M_calculationunit_asel = 1'h0;
        M_calculationunit_bsel = 4'h0;
        M_calculationunit_we = 1'h1;
        M_calculationunit_ra = 4'h1;
        M_calculationunit_rb = 4'h5;
        M_calculationunit_rc = 4'h1;
        M_calculationunit_wdsel = 2'h0;
        if (M_calculationunit_bdata[0+0-:1] == 1'h1) begin
          if (M_calculationunit_adata[0+1-:2] == 2'h0) begin
            M_gameMode_d = INIT2_gameMode;
          end else begin
            if (M_calculationunit_adata[0+1-:2] == 2'h1) begin
              M_gameMode_d = INIT3_gameMode;
            end else begin
              if (M_calculationunit_adata[0+1-:2] == 2'h2) begin
                M_gameMode_d = WIN_gameMode;
              end
            end
          end
        end else begin
          if (M_calculationunit_bdata[0+0-:1] == 1'h0) begin
            M_gameMode_d = IDLE1_gameMode;
          end
        end
      end
      INIT2_gameMode: begin
        M_calculationunit_alufn = 6'h1a;
        M_calculationunit_asel = 1'h0;
        M_calculationunit_bsel = 4'ha;
        M_calculationunit_we = 1'h1;
        M_calculationunit_ra = 4'h3;
        M_calculationunit_rc = 4'h0;
        M_calculationunit_wdsel = 2'h0;
        M_gameMode_d = IDLE1_gameMode;
      end
      INIT3_gameMode: begin
        M_calculationunit_alufn = 6'h1a;
        M_calculationunit_asel = 1'h0;
        M_calculationunit_bsel = 4'ha;
        M_calculationunit_we = 1'h1;
        M_calculationunit_ra = 4'h4;
        M_calculationunit_rc = 4'h0;
        M_calculationunit_wdsel = 2'h0;
        M_gameMode_d = IDLE1_gameMode;
      end
      WIN_gameMode: begin
        M_calculationunit_alufn = 6'h05;
        M_calculationunit_asel = 1'h0;
        M_calculationunit_bsel = 4'ha;
        M_calculationunit_we = 1'h1;
        M_calculationunit_ra = 4'hf;
        M_calculationunit_rc = 4'h0;
        M_calculationunit_wdsel = 2'h0;
        if (io_dip[10+0-:1]) begin
          M_calculationunit_we = 1'h1;
          M_calculationunit_rc = 4'h0;
          M_calculationunit_wdsel = 2'h1;
          M_gameMode_d = RESET_gameMode;
        end
      end
      RESET_gameMode: begin
        M_calculationunit_we = 1'h1;
        M_calculationunit_rc = 4'h1;
        M_calculationunit_wdsel = 2'h1;
        M_gameMode_d = IDLE_gameMode;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_gameMode_q <= 1'h0;
    end else begin
      M_gameMode_q <= M_gameMode_d;
    end
  end
  
endmodule
