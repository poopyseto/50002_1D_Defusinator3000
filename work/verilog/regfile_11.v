/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module regfile_11 (
    input clk,
    input rst,
    input [3:0] write_address,
    input we,
    input [15:0] write_data,
    input [3:0] read_address_a,
    input [3:0] read_address_b,
    output reg [15:0] out_a,
    output reg [15:0] out_b,
    output reg [11:0] led_light
  );
  
  
  
  reg [15:0] M_board_state_d, M_board_state_q = 1'h0;
  reg [15:0] M_clearval_d, M_clearval_q = 1'h0;
  reg [15:0] M_startingseq_d, M_startingseq_q = 1'h0;
  reg [15:0] M_secondseq_d, M_secondseq_q = 1'h0;
  reg [15:0] M_finalseq_d, M_finalseq_q = 1'h0;
  reg [15:0] M_temp_reg_d, M_temp_reg_q = 1'h0;
  
  always @* begin
    M_board_state_d = M_board_state_q;
    M_startingseq_d = M_startingseq_q;
    M_temp_reg_d = M_temp_reg_q;
    M_finalseq_d = M_finalseq_q;
    M_clearval_d = M_clearval_q;
    M_secondseq_d = M_secondseq_q;
    
    M_startingseq_d = 16'h0000;
    if (we) begin
      
      case (write_address)
        4'h0: begin
          M_board_state_d = write_data;
        end
        4'h1: begin
          M_clearval_d = write_data;
        end
        4'h2: begin
          M_startingseq_d = write_data;
        end
        4'h3: begin
          M_secondseq_d = write_data;
        end
        4'h4: begin
          M_finalseq_d = write_data;
        end
        4'h5: begin
          M_temp_reg_d = write_data;
        end
        default: begin
          M_temp_reg_d = M_temp_reg_q;
        end
      endcase
    end
    
    case (read_address_a)
      4'h0: begin
        out_a = M_board_state_q;
      end
      4'h1: begin
        out_a = M_clearval_q;
      end
      4'h2: begin
        out_a = M_startingseq_q;
      end
      4'h3: begin
        out_a = M_secondseq_q;
      end
      4'h4: begin
        out_a = M_finalseq_q;
      end
      4'h5: begin
        out_a = M_temp_reg_q;
      end
      4'hf: begin
        out_a = 16'h0000;
      end
      default: begin
        out_a = M_startingseq_q;
      end
    endcase
    
    case (read_address_b)
      4'h0: begin
        out_b = M_board_state_q;
      end
      4'h1: begin
        out_b = M_clearval_q;
      end
      4'h2: begin
        out_b = M_startingseq_q;
      end
      4'h3: begin
        out_b = M_secondseq_q;
      end
      4'h4: begin
        out_b = M_finalseq_q;
      end
      4'h5: begin
        out_b = M_temp_reg_q;
      end
      4'hf: begin
        out_b = 16'h0000;
      end
      default: begin
        out_b = M_startingseq_q;
      end
    endcase
    led_light[0+8-:9] = M_board_state_q[0+8-:9];
    led_light[9+2-:3] = M_clearval_q[0+2-:3];
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_board_state_q <= 1'h0;
      M_clearval_q <= 1'h0;
      M_startingseq_q <= 1'h0;
      M_secondseq_q <= 1'h0;
      M_finalseq_q <= 1'h0;
      M_temp_reg_q <= 1'h0;
    end else begin
      M_board_state_q <= M_board_state_d;
      M_clearval_q <= M_clearval_d;
      M_startingseq_q <= M_startingseq_d;
      M_secondseq_q <= M_secondseq_d;
      M_finalseq_q <= M_finalseq_d;
      M_temp_reg_q <= M_temp_reg_d;
    end
  end
  
endmodule
